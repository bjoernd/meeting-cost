#!/usr/bin/python3

# Meeting cost calculator
#
# Use salary data from levels.fyi to compute the cost of a meeting
# based on its attendees.

# TODO:
#  - caching of salary data
#  - use logging
#  - support other countries than USA
#  - support other companies than Amazon
#  - support other job roles than SDM and SDE
#  - support other currencies
#  - support other meeting lengths

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from io import StringIO
import time
import pandas as pd
import sys

SDE_URL="https://www.levels.fyi/companies/amazon/salaries/software-engineer?country=254"
SDM_URL="https://www.levels.fyi/companies/amazon/salaries/software-engineering-manager?country=254"
TPM_URL="https://www.levels.fyi/companies/amazon/salaries/technical-program-manager?country=254"


def extract_salaries(url):
    # Set up Chrome webdriver
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # To run Chrome in headless mode
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-gpu")
    service = Service('/usr/bin/chromedriver')  # Path to your ChromeDriver
    driver = webdriver.Chrome(service=service, options=chrome_options)

    # Load the webpage
    driver.get(url)

    # Wait for the content to load
    wait = WebDriverWait(driver, 10)
    div_element = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".MuiTableContainer-root.job-family_tableContainer__MOxEY.css-kge0eu")))

    # Find the link to Click
    link_to_click = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".MuiButton-root.MuiButton-text.MuiButton-textNeutral.MuiButton-sizeLarge.MuiButton-textSizeLarge.MuiButtonBase-root.css-1t9hmlk")))
    # Click the link
    link_to_click.click()
    time.sleep(3)

    # Get the page content
    page_content = driver.page_source.replace('\n', ' ')

    # Quit the driver
    driver.quit()

    return pd.read_html(StringIO(page_content))[0]


def create_salary_dict(df):
    ret = {}

    for key in ["L4", "L5", "L6", "L7", "L8"]:
        data = df[df["Level Name"].str.contains(key)]
        if not data.empty:
            salary = data["Total"].values[0]
            # skip unknown salary data
            if '--' in salary: continue
            salary = salary.replace('€', '')
            salary = salary.replace('K', '')
            salary = int(salary, 10) * 1000
            # 238 work days per year, 8 hours per day
            ret[key] = salary / 238. / 8.

    return ret


def usage():
    print(f"{sys.argv[0]} ATTENDEE [ATTENDEE ...]")
    print()
    print("Compute meeting cost based on attendees. Attendee format is <role>-<level>.")
    print("Supported roles: SDM SDE TPM")
    print("Supported levels: L4 L5 L6 L7 L8")
    print()
    print("Example usage:")
    print(f"""   $> {sys.argv[0]} SDM-L7 SDE-L7 SDE-L5 SDE-L4 SDE-L5
   Getting salary data...
   Meeting cost:
     -  30 min:    516.02 €
     -  45 min:    774.03 €
     -  60 min:   1032.04 €
     -  90 min:   1548.06 €
     - 120 min:   2064.08 €
    """)


if __name__ == "__main__":
    salaries = {}

    if len(sys.argv) < 2:
        usage()
        sys.exit(0)

    print("Getting salary data...")
    for title, short, url in [ ("Software Engineering Managers", "SDM", SDM_URL),
                        ("Software Developers", "SDE", SDE_URL),
                        ("Technical Program Managers", "TPM", TPM_URL)]:
        df = extract_salaries(url)
        salaries[short] = create_salary_dict(df)

    hourly_cost = 0

    # Treat all cmd line args as attendees of the format <short>-<level>
    for attendee in sys.argv[1:]:
        job, level = attendee.split('-')

        try:
            hourly = salaries[job][level]
            hourly_cost += hourly
        except KeyError as ke:
            print(f"Skipping unknown attendee type {attendee}")

    print("Meeting cost:")
    for length in [0.5, 0.75, 1, 1.5, 2]:
        print(f"  - {int(length * 60):3d} min: {hourly_cost * length: 9.2f} €")
